globalVariables(c("stage"))

xPrint <- function(x, dec = 1) sprintf(paste("%.", dec, "f", sep = ""), x)

CondRelSurv_NE_Pop <- function(rs_0, ivall = c(95, 103)) { # rs_0 = x
  rs = se = years = cond_rs = cond_se = NULL
  tb <- rs_0[rs > 0 & se > 0 & cond_rs > 0]
  if (tb[, min(years)] == 1) { # min im 1.Jahr
    if (tb[1:min(10, nrow(tb))][, min(cond_rs + cond_se)] > 99 &
        tb[, max(rs)] < 110) {
      return(FALSE)
    }
  } # surv > ref.pop
  if (tb[, min(cond_rs)] > ivall[1] &
      tb[, max(cond_rs)] < ivall[2]) {
    return(FALSE)
  }
  if (nrow(tb) > 4) { # mindestens 4 Stützstellen für Spline
    uu <- rsSpline(tb[, .(years, rs)])
    i1 <- floor(min_Rs(uu))
    m1 <- max_Rs(uu, 1)
    if (tb[m1, rs - se] < 103 & tb[i1, rs + se] > 95) {
      return(FALSE)
    }
  } #  plotSpline(tb)
  return(TRUE)
}
min_Rs <- function(uu) {
  if (nrow(uu$mins) > 0) {
    return(min(uu$mins$x[1]))
  }
  if (uu$d012$y[1] <= uu$d012$y[nrow(uu$d012)]) { # stetig steigend
    return(1)
  }
  return(max(uu$d012$x)) # letztes Jahr
}
max_Rs <- function(uu, i1) { # i1=1
  y = x = NULL
  if (nrow(uu$maxs) > 0) {
    ix <- which(uu$maxs$x > i1)
    m1 <- max(uu$maxs[ix, y])
    if (uu$d012[nrow(uu$d012), y] > m1) { # maximum am Ende
      return(uu$d012[nrow(uu$d012), floor(x)])
    }
    return(uu$d012[y == m1, floor(x)])
  }
  return(uu$d012[nrow(uu$d012), x])
}
test_rsIncrease <- function(tab, rs_0, opt) { # tab=dp$tab
  maxRs_gt <- function(tab, uu, vv) {
    s1 <- max_Rs(uu, 1)
    tab[s1, rs - se] > vv
  }
  rs = se = years = NULL
  tab <- data.table(tab[rs > 0 & se > 0, ])
  uu <- rsSpline(tab[, .(years, rs)])
  if (maxRs_gt(tab, uu, 110)) {
    return(T)
  }
  # print(showTab(tab))
  #  plotSpline(tab[,.(stage,years,rs)],60)
  i1 <- floor(min_Rs(uu))
  m1 <- max_Rs(uu, i1)
  #    print(paste(m1,i1))
  if (m1 <= i1) { # max vor min
    return(F)
  }
  x <- tab[i1:nrow(tab), ]
  if (nrow(x) < 4) { # kein spline möglich
    return(F)
  }
  lo <- x[1, rs + 1.00 * se]
  i_max <- m1 - i1 + 1
  if (CondRelSurv_NE_Pop(x[c(1:i_max)], ivall = c(95, 103))) {
    if (x[, .N] == 0) {
      return(FALSE)
    }
    hi <- x[i_max, rs]
    return(hi > lo) #
  } else {
    return(FALSE)
  }
}
rsSpline <- function(tb) { # tb = tb[,.(years,rs)]
  findExtrema <- function(d012) {
    i <- 1
    ix <- 0
    n1 <- nrow(d012) - 1
    while (i < n1) {
      if ((d012$y1[i] > 0 & d012$y1[i + 1] < 0) |
          (d012$y1[i] < 0 & d012$y1[i + 1] > 0)) {
        ix <- c(ix, i)
      }
      i <- i + 1
    }
    return(ix[-1])
  }
  y2 = NULL
  tb$rs <- as.numeric(tb$rs)
  sp1 <- stats::smooth.spline(tb)
  Sx <- seq(1, nrow(tb), 0.1)
  d0 <- data.frame(stats::predict(sp1, Sx))
  d1 <- data.frame(stats::predict(sp1, Sx, deriv = 1))
  d2 <- data.frame(stats::predict(sp1, Sx, deriv = 2))
  setnames(d1, "y", "y1")
  setnames(d2, "y", "y2")
  d12 <- merge(d1, d2, by = "x")
  d012 <- setDT(merge(d0, d12, by = "x"))
  extrema <- findExtrema(d012)
  mins <- d012[extrema][y2 > 0]
  # if(d012$y[1] < mins$y[1])
  #   mins = rbind(d012[1],mins) #min. am linken Rand
  maxs <- d012[extrema][y2 < 0]
  #  plotSpline(tb[,.(years,rs)])
  return(list(d012 = d012, sp1 = sp1, mins = mins, maxs = maxs)) # ,Extrema=extrema))
}
#
# ddI.logRegPredict <- function(alive, am, opt) { # 	am=m2
#   alive$prob <- predict(am, alive, type = "response")
#   alive$zoutl <- ifelse(alive$prob > opt$pCut, 1, 0)
#   return(alive)
# }

ddI.predict <- function(dp, z1, opt, sp, rs_0) {
  prob <- zoutl <- death <- NULL
  dead <- z1[death == 1]
  dead[, zoutl := 0]
  dead[, prob := 0]
  alive <- z1[death == 0]
  if ("m1" %in% names(dp)) {
    alive$prob <- stats::predict.glm(dp$m1, newdata = alive, type = "response")
    alive$zoutl <- ifelse(alive$prob > opt$pCut, 1, 0)
  } else {
    alive[, zoutl := 0]
    alive[, prob := 0]
  }
  dp$data <- rbind(alive, dead)
  zz <- subset(dp$data, zoutl == 0)
  dp$tab <- myRelSurv(zz, opt, sp)
  return(dp)
}


scoreFuAgeSurvy <- function(dp, z1, rs_0, sp, opt) {
  myScore <- function(alive) {
    a1 <- alive[order(fu.age, decreasing = TRUE), .(id, fu.age, fu.time)] # [1:1000,]
    a2 <- alive[order(fu.time, decreasing = TRUE), .(id)] # [1:1000,]
    # bb = a1[a2,on='id',all=FALSE]
    bb <- merge(a1, a2, by = "id", all.x = FALSE, all.y = FALSE)
    bb <- data.table(merge(a1, a2, by = "id", all.x = FALSE, all.y = FALSE))
    bb$norm <- sqrt(bb$fu.age^2 + bb$fu.time^2)
    bb <- bb[order(norm), ]
    bb$nr <- c(1:nrow(bb))
    return(bb)
  }
  zoutl <- prob <- death <- fu.time <- fu.age <- NULL
  dp$data[, zoutl := 0]
  dp$data[, prob := 0]
  dp$tab <- rs_0
  alive <- data.table(subset(dp$data, death == 0))
  deaths <- data.table(subset(dp$data, death == 1))
  dp$scoring <- 'yes'
  bb <- myScore(alive)
  q1 <- 0
  while (test_rsIncrease(dp$tab, rs_0, opt)) {
    ii <- which(bb$nr >= stats::quantile(bb$nr, opt$quant - q1))
    alive[id %in% bb$id[ii], ]$zoutl <- 1
    dp$data <- rbind(alive, deaths)
    z2 <- dp$data[zoutl == 0, ]
    x1 <- myRelSurv(z2, opt, sp)
    dp$tab <- x1
    q1 <- q1 + 0.001
    if (PercentMissedDeath(dp) > 3) {
      break
    }
  }
  return(dp)
}

PercentMissedDeath <- function(dp) {
  zoutl = NULL
  death <- nrow(subset(dp$data, death == 1))
  missed_death <- nrow(subset(dp$data, zoutl == 1))
  if (death > 0) pp <- missed_death * 100 / (death + missed_death) else pp <- 0
  return(pp)
}

myRelSurv <- function(z1, opt, sp) {
#  z1[, vitstat := death + 1]
  z1[,':=' (vitstat = z1$death+1)]
  rs_0 <- periodR::period(data.frame(z1),
                          k = opt$survYears,
                          sp$males, sp$females,
                          opt$lastYear - 5,
                          opt$lastYear,
                          method = "edererII")
  data.table(
    stage = unique(z1$stage),
    years = c(1:length(rs_0$rel.surv)),
    rs = rs_0$rel.surv,
    se = rs_0$rel.surv.stderr,
    cond_rs = rs_0$cond.rel.surv,
    cond_se = rs_0$cond.rel.surv.stderr
  )
}

ddi.init_dp <- function(z1, deaths, opt) {
  dp <- list(stage = as.character(unique(z1$stage)))
  dp$CondRelSurv_ne_Pop <- 0
  dp$md_gt_7 <- 0
  dp$scoring <- 'no'
  dp$rs_0Increase <- 0
  dp$quant <- opt$quant # 1-0.005
  dp$ageCut <- as.numeric(stats::quantile(deaths$fu.age, dp$quant))
  dp$survCut <- as.numeric(stats::quantile(deaths$fu.time, opt$quant))
  return(dp)
}


ddi.findCutPoints <- function(z1, dp, opt, sp, rs_0, quant) { # q1=z1;quant = opt$quant-q1
  death <- NULL
  brglm_NotConverge <- function(dead) {
    tt <- tryCatch(
      fit <- brglm::brglm(formula = zoutl ~ fu.age + fu.time, family = "binomial", data = dead),
      error = function(e) e,
      warning = function(w) w
    )
    u <- grep("Iteration limit reached", tt$message)
    if (length(u) > 0) {
      return(TRUE)
    }
    #    print(tt$message)
    return(FALSE)
  }
  setOutlier <- function(dp, dead) {
    q.age <- ifelse(dead$fu.age > dp$ageCut, 1, 0)
    q.surv <- ifelse(dead$fu.time > dp$survCut, 1, 0)
    zoutl <- ifelse(q.surv == 1 & q.age == 1, 1, 0)
    return(zoutl)
  }
  if (test_rsIncrease(tab = rs_0, rs_0, opt)) {
    dp$rs_0Increase <- 1
    dead <- subset(z1, death == 1)
    dead$zoutl <- setOutlier(dp, dead)
    q2 <- 0.0005
    while (brglm_NotConverge(dead)) { # reduziert das Quantil bis Glm konvergiert
      quant <- quant - q2
      dp$ageCut <- as.numeric(stats::quantile(dead$fu.age, quant))
      dp$survCut <- as.numeric(stats::quantile(dead$fu.time, quant))
      dead$zoutl <- setOutlier(dp, dead)
    }
    oldw <- getOption("warn")
    options(warn = -1)
    dp$m1 <- brglm::brglm(formula = zoutl ~ fu.age + fu.time, family = "binomial", data = dead)
    options(warn = oldw)
  }
  dp <- ddI.predict(dp, z1, opt, sp, rs_0)
  #  print(table(dp$data$zoutl))
  return(dp)
}

ddi.iterateMissedDeaths <- function(dp, rs_0, z1, deaths, sp, opt) {
  showCut <- function(dp) paste("age", dp$ageCut, ", surv", dp$survCut, "quant:", dp$quant)
  #  dp = ddi.init_dp(z1,deaths,opt)
  q1 <- 1 - dp$quant
  delta <- 0.005
  dp$CondRelSurv_ne_Pop <- 1
  dp <- ddi.findCutPoints(z1, dp, opt, sp, rs_0, opt$quant)
  while (test_rsIncrease(dp$tab, rs_0, opt)) {
    #     	print(opt$quant-q1)
    dp$ageCut <- as.numeric(stats::quantile(deaths$fu.age, opt$quant - q1))
    dp$survCut <- as.numeric(stats::quantile(deaths$fu.time, opt$quant - q1))
    dp <- ddi.findCutPoints(z1, dp, opt, sp, rs_0, opt$quant - q1)
    q1 <- q1 + delta
    dp <- ddI.predict(dp, z1, opt, sp, rs_0)
    #  showTab(dp$tab) #dp$tab[,.(stage,years,rs,cond_rs,cond_se)]
    #     plotSpline(dp$tab[,.(stage,years,rs)])
    if (PercentMissedDeath(dp) > 7.0) {
      break
    }
  }
  dp$quant <- dp$quant - (q1 - delta)
  #  showCut(dp)
  #  dp$data[death==1,.N,zoutl]
  return(dp)
}

#z1=z0[z0$stage=='II',];
dedectImmortals <- function(z1, opt, sp){
  rs <- se <- rs_all <- rs_all.se <- NULL
  years <-  NULL
  if (nrow(z1) == 0) {
    return(paste("keine Daten in z1"))
  }
  z1 <- setDT(z1)
  cls = c('id', 'icd','stage','sex','diagage','agr','dm','dy','fm','fy','death','fu.age','fu.time')
  z1 <- z1[,cls,with = FALSE]
  percentDeaths <- function(z1) sum(z1$death == 1) * 100 / nrow(z1)
  z1$zoutl<- 0
  deaths <- z1[with(z1,death == 1)]
  dp <- ddi.init_dp(z1, deaths, opt)
  rs_0 <- myRelSurv(z1, opt, sp)
  if (CondRelSurv_NE_Pop(rs_0)) {
    dp <- ddi.iterateMissedDeaths(dp, rs_0, z1, deaths, sp, opt)
    dp <- ddI.predict(dp, z1, opt, sp, rs_0)
    if ((percentDeaths(z1) < 7) | (PercentMissedDeath(dp) >= 7.0)) {
      if (PercentMissedDeath(dp) > 7.0) {
        dp$md_gt_7 <- 1
      }
      dp <- scoreFuAgeSurvy(dp, z1, rs_0, sp, opt)
    }
  } else {
    dp <- ddI.predict(dp, z1, opt, sp, rs_0)
  }
  dp$tab[, rs_all := xPrint(rs_0$rs)]
  dp$tab[, rs_all.se := xPrint(rs_0$se)]
  dp$tab[, rs := xPrint(rs)]
  dp$tab[, se := xPrint(se)]
  dp$tab <- dp$tab[, .(stage, years, rs_all, rs_all.se, rs, se)]
#  dp$survYears <- opt$survYears
  return(dp)
}

result <- function(dp,opt){#dp = xx$dp
  getAnalysisParam <- function(d0){#d0 = xx$dp[[1]]
    data.table(stage = d0$stage,
               CondRelSurv_ne_Pop = d0$CondRelSurv_ne_Pop,
  #             survYears = d0$survYears,
               scoring = d0$scoring,
               md_gt_7 = d0$md_gt_7,
               rs_0Increase = d0$rs_0Increase,
               ageCut = d0$ageCut,
               survCut = d0$survCut,
               quant = d0$quant
               )
  }
  dd <- dp[[1]]$data;
  oo <- getAnalysisParam(dp[[1]])
  tab <- dp[[1]]$tab
  dp[[1]] <- list(mod1 = dp[[1]]$m1)
  if(length(dp) > 1)
    for(i in 2:length(dp)){
      dd <- rbind(dd,dp[[i]]$data)
      oo <- rbind(oo,getAnalysisParam(dp[[i]]))
      tab <- rbind(tab,dp[[i]]$tab)
      dp[[i]] <- list(mod1 = dp[[i]]$m1)
    }
  dd[,vitstat := NULL]
  setnames(dd,'zoutl','missedDeath')
  dd[,death := ifelse(missedDeath == 1,1,death)]
  Param <- list(
                  opt = opt,
                  runTime=oo
               )
  return(list(dat=dd,dp=dp,survTab = tab,Param=Param))
}

' Summary of classification results
#'
#'  @param xx list object generated by classify
#'
#' @return
#' data.table with frequencies by stage
#' @export
#'
#' @examples
#' #' xx = classify(C61)
#' tableOutlier(xx)
#'
tableOutlier = function(xx){#dp=xx
  dd <- xx$dat;
  uu <- dd[,.(patients= .N),by=stage]
  uu <- merge(uu,dd[death==0,.(survivals= .N),by=stage],by='stage',all.x=T)
  uu <- merge(uu,dd[death==1,.(deaths= .N),by=stage],by='stage',all.x=T)
  uu <- merge(uu,dd[missedDeath==1,.(missedDeaths = .N),by=stage],by='stage',all.x=T)
  bb <- data.frame(t(apply(uu[,-1],2,sum,na.rm=T)))
  bb$stage <- 'total'
  bb <- rbind(uu,bb)
  #  bb[,sim_md:=ifelse(is.na(sim_md),0,sim_md)]
  bb[,md_percent := ifelse(deaths > 0,	xPrint(missedDeaths*100/(deaths),2),0)]
  bb[,icd := unique(dd$icd)]
  bb[,Agr := unique(dd$agr)]
  bb[,sex :=unique(dd$sex)]
  #  bb[,survYears := xx$dp[[1]]$survYears]
  bb <- bb[,.(icd,Agr,stage,sex,patients,
                       survivals,deaths,
                       missedDeaths,md_percent)]
  return(bb)
}


#' Show parameter of missed deaths classification
#'
#' @param xx list object generated by classify
#'
#' @return data.table with parameter of the
#' missed deaths classification by stage
#' @export
#'
#' @examples
#'
classify.Param <- function(xx){#xx = rr
  uu <- data.table(xx$Param$runTime)
  opt <- xx$Param$opt
  print(paste('Maximal time for relative survival estimation:',opt$survYears,'years'))
  print(paste0('Follow-up end: ',opt$lastYear,'-Dec-31'))
  uu[,survYears := NULL]
  uu[,ageCut := xPrint(ageCut,1) ]
  uu[,survCut := xPrint(survCut,2) ]
  uu[,quant := xPrint(quant,2) ]
  uu[,rs_0Increase := ifelse(rs_0Increase==1,'yes','no')]
  uu[,CondRelSurv_ne_Pop := ifelse(CondRelSurv_ne_Pop==1,'no','yes')]
  uu[,md_gt_7 := ifelse(md_gt_7==1,'yes','no')]
  setnames(uu,'md_gt_7','>=7% missed deaths')
  setnames(uu,'CondRelSurv_ne_Pop','Condional relative Survival in [95%,103%]')
  uu[]
  # data.table(stage = xx$AnalysisParam$stage,
  #   scoring = xx$AnalysisParam$scoring)

}
exitTime <- function(t1,opt){#t1 = z0
  Ende  <- as.Date(paste(opt$lastYear,12,31,sep='-'))
  t1[,fd := as.Date(paste(fy,fm,'15',sep='-'))]
#  t1[,fd := ifelse(fd > as.Date(paste(opt$lastYear,12,15,sep='-')),Ende,fd)]
  t1[death == 0,fd := ifelse(fd >= as.Date(paste(opt$lastYear,12,15,sep='-')),Ende,fd)]
  t1[death == 1,fd := ifelse(fd > as.Date(paste(opt$lastYear,12,15,sep='-')),Ende,fd)]
  t1[,dd := as.Date(paste(dy,dm,'15',sep='-'))]
  t1$fd <- ifelse(t1$fd == t1$dd,t1$fd+15,t1$fd)
  t1$death <- ifelse(t1$fd >= Ende,0,t1$death)
  #t1$vitstat1 <- t1$death+1
  class(t1$fd) <- "Date"
  t1[,fu.time := ifelse(DCO==2,as.numeric(fd - dd)/365.24,0)]
  t1[,fu.age := diagage + fu.time]
  return(t1[])
}

#' Classifying missed death in cancer registry data
#'
#' @param dat 	data.frame consisting of 13 variables:\cr
#'  id - (int) unique identifier for each data line ,\cr
#'  icd - (chr) identifier for type of cancer, \cr
#'  stage - (factor) cancer stage (e.g. "I,"II","III","IV","Missing" for UICC stages),\cr
#'  sex -  (int) 1=male, 2=female [von Bernd kopiert], \cr
#'  diagage - (int) age at diagnosis in years, [von Bernd kopiert] \cr
#'  agr - (factor) identifier age group, \cr
#'  dm - (int) month of diagnosis, a number in 1:12,\cr
#'  dy - (int) calendar year of diagnosis (e.g. 2010), \cr
#'  fm - (int) month of follow-up end, a number in 1:12, \cr
#'  fy - (int) calendar year of end of follow-up, (e.g. 2012),\cr
#'  death -  (int) death at follow-up end (0=alive, 1=dead), \cr
#'  fu.age -  (num)  age at follow-up end in years, \cr
#'  fu.time - (num) time  in years between diagnosis and follow-up end. \cr
#' @param sp adata frame(s) of age- and calendar
#' year-specific survival probabilities\cr
#' of males in the underlying population\cr
#' made up of numeric vectors of length 100\cr
#' providing 1-year survival probabilities\cr
#' from age 0 to 99 years  data.frame
#'
#' @return a list object
#' @export
#' @import data.table
#' @import plyr
#' @import brglm
#'
#'
#' @examples
#' data(C61)
#' data(sp)
#' xx = classify(C61,sp)
#'
classify <- function(dat,sp,lastYear,survYears=30) { # dat = C61,lastYear=2018
  opt <- list(survYears=survYears,
              lastYear = lastYear,
              quant = 0.999,
              pCut = 0.9) #cut point logistic regression
  z0 = data.table(dat)
  z0 = exitTime(z0,opt)
  if (min(z0[, .N,stage]$N) < 500) { # N_i < 1000 ; se$stage = factor('Missing')
    z0$stage <- factor("Missing")
    dp <- dlply(z0, .(stage), dedectImmortals , opt, sp)
  } else {
    dp <- dlply(z0, .(stage), dedectImmortals , opt, sp)
  }
  rr = result(dp,opt)
  return(rr)
}



